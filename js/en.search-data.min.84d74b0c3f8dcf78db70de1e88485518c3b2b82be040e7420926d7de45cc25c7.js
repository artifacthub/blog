'use strict';(function(){const b={};b.doc={id:'id',field:['title','content'],store:['title','href']};const a=FlexSearch.create(b);window.geekdocSearchIndex=a,a.add({id:0,href:'/',title:"Artifact Hub Blog",content:""}),a.add({id:1,href:'/blog/artifact-statistics/',title:"Artifact Statistics",content:"Have you ever wondered how often an artifact is viewed on Artifact Hub? It\u0026rsquo;s possible to view these details right on the page for an artifact. The following image captures 30 days work of statistics for the Artifact Hub chart.\nThe previous 30 days statistics are displayed at the bottom of the page. After the documentation for the artifact.\nThe different colors showcase different versions of an artifact. For example, when the primary color changed from yellow to blue in the image above it was due to a new latest release.\nIn addition to the statistics on the individual artifacts, there is an overall statistics page. This page provides insight into the most popular packages, number of packages, number of releases, number of repositories being tracked, and so much more. It\u0026rsquo;s a wealth of information showcasing the artifact ecosystem.\n"}),a.add({id:2,href:'/blog/',title:"Blogs",content:""}),a.add({id:3,href:'/blog/helm-named-templates/',title:"Exploring Helm Named Templates",content:"Helm provides the ability to create named templates in charts. You can use a named template one or more times and even pass argumnets to them. Named templates are a wonderful way to write reusable templates for your charts and the building block for library charts.\nArtifact Hub now allows you to navigate the named templates from the template explorer.\nWhen you mouse over a named template a pop-up will tell you the line and file this template is named in. Clicking the \u0026ldquo;Go to definition\u0026rdquo; link will take you right to that file and line where you can view this template. If you want to go back to your previous spot you can use your browsers back button to navigate back there.\nIf you want to try using this feature you can start with the Artifact Hub chart.\n"}),a.add({id:4,href:'/blog/helm-template-compare/',title:"Comparing Helm Templates Between Versions",content:"Have you ever wondered, what changed in the templates between two versions of a Helm chart? It\u0026rsquo;s possible to see this for charts listed on Artifact Hub.\nTo view a diff, navigate to the chart and choose to view its templates. The image below shows this on the Artifact Hub chart.\nOnce viewing the templates is open, you can select another version of the chart for a template diff comparison.\nSeeing what changed in the templates is that easy.\n"}),a.add({id:5,href:'/blog/container-images/',title:"Container Image Support",content:"When containers took off in popularity, everyone was putting their container images meant for general public consumption on Docker Hub. This made it easy to discover container images. You could search Docker Hub or use docker search in your console.\nWith the rise of the Open Container Initiative (OCI) and many different companies operating container registries this all changed. Images meant for public consumption could be in GitHub Container Registry, the Amazon ECR Public Gallery, and many other registries. This change distributed where images were hosted.\nDistributed images meant there was no longer a centralized search solution to look for container images. Discovery of images became more difficult.\nToday, we are please to share that Artifact Hub now supports listing and searching for container images.\n\nThe first image (shown above), that serves as an example, is the ah tool wrapped up as a container image.\nAnyone can list their container images as long as they are hosted in a publicly available registry. It needs to be publicly available as Artifact Hub will need to query the registry for information.\nThe details around listing your image and providing metadata for Artifact Hub can be found in the documentation. Note that this is an experimental and new feature that may change as we learn more about the needs of making distributed container images more discoverable. Feedback is welcome and appreciated.\n"}),a.add({id:6,href:'/blog/screenshots/',title:"Screenshots",content:"Does your application have a user interface? Would you want to display screenshots of it? If that\u0026rsquo;s the case, you can display them on Artifact Hub for Helm, OLM, Krew, and Tekton. The screenshot below shows the display screenshots for the Artifact Hub chart.\nWhen screenshots are made available to Artifact Hub a button will display in the sidebar to access them.\nThe next screenshot illustrates where you can find the button.\nIf you want to add screenshots to your artifacts you can use the artifacthub.io/screenshots annotation. The details of this annotation, along with examples, can be found in the Artifact Hub documentation.\n"}),a.add({id:7,href:'/blog/changelogs/',title:"Changelogs",content:"Changelogs are useful for consumers of an artifact or package. They let consumers see, at a glance, what has changed without needing to read or understand the source. Reading the source doesn\u0026rsquo;t convey intent as well as a changelog, either. To understand intent, you often need to look at issues and commit messages for some additional context. All of that can be summarized in a changelog.\nArtifact Hub provides the ability to have a changelog that can be nicely displayed, easily navigated, and downloaded as markdown. The image displayed here is the changelog for the Artifact Hub chart. Changelogs are supported for most of the supported artifact types. Artifact Hub discovers them via annotations.\nThe annotation works in two different forms. To illustrate these we can look at the Artifact Hub chart. First, there is a simple form that looks like:\nannotations: artifacthub.io/changes: |- Support for Tekton pipelines - Versions index to changelog modal - Allow publishers to include screenshots in packages The simple form is just a list of the things that have changed.\nA more complex form enables you to mark things as added, changed, and fixed while providing the ability to add links to relevant sources. That form looks like:\nannotations: artifacthub.io/changes: |- kind: added description: Support for Tekton pipelines links: - name: Github Issue url: https://github.com/artifacthub/hub/issues/1485 - kind: added description: Versions index to changelog modal - kind: added description: Allow publishers to include screenshots in packages In this example you\u0026rsquo;ll notice the links are optional. When more information is added for the changes, Artifact Hub can provide a richer display.\nThe changes only need to include those for the current version. Artifact Hub builds the multi-release changelog from changes for each version. This full list is then displayed when clicking the changelog button on an artifact and can be downloaded as markdown from this display like the following:\n# Changelog ## 1.3.0 - 2021-10-06 ### Added - Support for Tekton pipelines - Versions index to changelog modal - Allow publishers to include screenshots in packages - Repository metadata file is now supported in Helm OCI repositories - Support for provenance files in Helm OCI repositories - Changes annotation is now available for Krew plugins kind ... The details you need to apply this to your artifacts can be found in the Artifact Hub annotation documentation.\n"}),a.add({id:8,href:'/blog/ah-cli/',title:"Artifact Hub CLI tool (ah)",content:"Artifact Hub leverages metadata stored in annotations. This metadata provides details such as the images in use, if something is an operator, and more. Annotations provide an easy way to convey this information. Wouldn\u0026rsquo;t it be great to check these annotations before cutting a release? Now you can with the ah command line tool.\nGetting ah There are two ways you can use the ah tool. First, you can install the binary. You can get the binary from the releases page on GitHub or install it on Mac via Homebrew or on Windows via Scoop.\nThe second way you can get ah is by using the container image. This container image can be used in testing tools and other automation to help catch any issues.\nUsing ah The ah tool is pretty straight forward to use. Aside from the help and version commands, the primary command is lint. The following example is ah run against the Artifact Hub chart.\n$ ah lint -p artifact-hub ------------------------------------------------------------------------------------------------------------------------ ✓ artifact-hub 1.1.1 (artifact-hub) ------------------------------------------------------------------------------------------------------------------------ Package lint SUCCEEDED! ✓ Name: artifact-hub ✓ Version: 1.1.1 ✓ App version: 1.1.1 ✓ Description: Artifact Hub is a web-based application that enables finding, installing, and publishing Kubernetes packages. ✓ License: Apache-2.0 ✓ Logo URL: https://artifacthub.github.io/helm-charts/logo.png ✓ Home URL: https://artifacthub.io ✓ Deprecated: false ✓ Pre-release: false ✓ Contains security updates: false ✓ Readme: PROVIDED ✓ Keywords: - kubernetes - helm - falco - opa - olm - tinkerbell actions - krew - tekton - keda scalers - coredns - keptn ! Links: *** NOT PROVIDED *** ✓ Maintainers: - Name: Sergio | Email: tegioz@icloud.com - Name: Cintia | Email: cynthiasg@icloud.com - Name: Matt | Email: matt@mattfarina.com ✓ Containers images: - Name: db-migrator | Image: artifacthub/db-migrator:v1.1.1 - Name: hub | Image: artifacthub/hub:v1.1.1 - Name: tracker | Image: artifacthub/tracker:v1.1.1 - Name: scanner | Image: artifacthub/scanner:v1.1.1 - Name: trivy | Image: aquasec/trivy:0.19.2 ✓ Changes: - Kind: changed | Description: Helm charts repository moved to a new location - Links: - Name: New location | URL: https://artifacthub.github.io/helm-charts/ - Kind: fixed | Description: Tracker and scanner containers resources were not being set properly - Kind: fixed | Description: Regression in logger middleware ! Recommendations: *** NOT PROVIDED *** ✓ Operator: false ✓ Values schema: PROVIDED ! Sign key: *** NOT PROVIDED *** ------------------------------------------------------------------------------------------------------------------------ 1 package(s) found, 0 package(s) with errors This was a successful run. What would happen if a field Artifact Hub was expecting had malformed data? To illustrate this, I took the same chart and altered the annotations so the content was malformed. The output of running ah against it shows us where the problem is at:\n$ ah lint -p artifact-hub ------------------------------------------------------------------------------------------------------------------------ ✗ artifact-hub 1.1.1 (artifact-hub) ------------------------------------------------------------------------------------------------------------------------ Package lint FAILED. 1 error(s) occurred: * invalid annotation: invalid images value ------------------------------------------------------------------------------------------------------------------------ 1 package(s) found, 1 package(s) with errors Error: lint failed When there is an error, ah exits with a non-zero exit code.\nSupported Packages Currently, ah only supports Helm charts. Support for more package types is coming soon. If you would like to help contribute to that effort or otherwise expand on the features of ah, the source is up on GitHub and we are happy to accept contributions.\nConclusion Adding the ah tool to your CI testing and your development workflow is a great way to make sure you have the annotations right before publishing your package and seeing the information up on the Artifact Hub. It also provides an easy place to start contributing to Artifact Hub, if you need additional features or have idea.\n"}),a.add({id:9,href:'/blog/1.0.0-released/',title:"1.0.0 Released",content:"We\u0026rsquo;re happy to announce the release of Artifact Hub 1.0.0.\nArtifact Hub is more than a website where you can search for cloud native packages. The software that powers the Artifact Hub is open source and can be run by anyone.\nThe Artifact Hub website has a listing for the Artifact Hub software with directions on how you can install it. The Artifact Hub listing on the Artifact Hub also services as an example of what a listing can display.\n\nIf you need a software to display your Helm charts, operators, or one of the other many things the Artifact Hub supports you can now use a stable release of the Artifact Hub to do so.\n"}),a.add({id:10,href:'/blog/embed-widget/',title:"Embed Artifact Details On Your Site",content:"Ever want to show off a package from the Artifact Hub on a website? I know I\u0026rsquo;ve thought about putting one in the sidebar of a website. Artifact Hub now makes that easy with a widget you can embed. The above image displays various configurations of the widget you can get from Artifact Hub.\nGetting a widget for any packages is straight forward. When viewing a package there is a menu with three dots. Under there is an option to get the widget. The Prometheus example below shows you where the option is.\nA modal, like the one below, will pop-up with options you can use to configure the display of the widget.\n  Now you can easily show off you charts, plugins, operators, actions, and more.\n"}),a.add({id:11,href:'/blog/verified-and-official-repos/',title:"Verified Publishers and Official Status",content:"Ever wonder if you are getting a package for a piece of software from the developer of that software? Or, have you ever wondered if the person who listed a repository or package on the Artifact Hub owns it? If you have, than you\u0026rsquo;re in luck. The Artifact Hub has badges that can answer those questions for you.\nVerified Publishers To illustrate this we can look at the prometheus chart as it is found in search.\nIn the lower right corner you\u0026rsquo;ll notice a badge notifying that it\u0026rsquo;s a verified publisher. When you mouse over the badge it explains that a verified publisher owns a repository.\nThe process to prove ownership and become a verified publisher is located in the Artifact Hub documentation. The gist behind it is that you need to upload a file to the repository with information signifying ownership.\nOfficial Status Official status is for repositories and packages that ship software they also develop. Prometheus coming from the Prometheus project is an example of something that can get official status while Bitnami packaging and delivering software like WordPress is not. This isn\u0026rsquo;t to say that packages from unofficial organizations can\u0026rsquo;t be excellent and trustworthy. Official status is designed to help those searching for software to be able to identify packages from software developers, if they exist.\nThe above prometheus chart example shows an official badge. When you mouse over the badge it provides some more detail about official status.\nGaining official status is more involved than having a verified repository. There are a number of requirements that need to be met including becoming a verified repository. Once the requirements are met a request needs to be submitted and someone will evaluate the setup to ensure it meets the criteria. All of this is covered in the documentation.\n"}),a.add({id:12,href:'/blog/helm-values-schema-reference/',title:"Helm Values Schema Reference",content:"Helm v3 introduced schemas for values. The schemas are written as JSON Schemas and put in a chart in a file named values.schema.json that goes right alongside values.yaml files. Wouldn\u0026rsquo;t it be great if there was a way to easily use these files to understand the values in a chart? Artifact Hub provides just that with its Values Schema Reference.\nThis image is the Values Schema Reference for the chart that installs the Artifact Hub software.\nOn the left is YAML for the values, on the right is the information from the schema lined up with the YAML on the left, and at the top is a search box with autocomplete.\nUsing this information you can learn more about any chart that provides a schema. Accessing the Values Schema Reference happens through a button in the right sidebar, when a schema is available for a chart.\n"}),a.add({id:13,href:'/blog/discover-tekton-tasks/',title:"Discover Tekton Tasks",content:"Artifact Hub has already provided search and discovery for Helm charts, OLM based operators, Falco rules, OPA policies, Tinkerbell actions, Krew (kubectl) plugins, and Helm plugins. These are all CNCF project related artifacts. We are happy to share that we have expanded beyond the CNCF to support another non-profit foundation based project with support for Tekton tasks.\nTekton is, in the words of their website:\n Tekton is a powerful and flexible open-source framework for creating CI/CD systems, allowing developers to build, test, and deploy across cloud providers and on-premise systems.\n You can browse the existing Tekton tasks (as shown below) and even get your own tasks listed.\n\nTekton is a cd.foundation project. The cd.foundation is another Linux Foundation sub-foundation alongside the CNCF.\n"}),a.add({id:14,href:'/blog/container-image-scanning/',title:"Container Image Scanning",content:"When trying to make a decision about which artifacts to use it\u0026rsquo;s useful to know some information about the security of the artifact. With Artifact Hub, it\u0026rsquo;s possible to see security scans for container based artifacts such as Operator Framework OLM based operators, some Helm Charts, OPA Policies, and Tinkerbell actions.\nOLM Operators When an operator contains an image that can be scanned a grade, the last time the image was scanned, and access to the full report can be found in the sidebar. The image below for the Starboard Operator, provided by the community operators, illustrates a report without vulnerabilities.\nNote: SCRATCH images, such as those that have no underlying layers and only contain a binary, and images with the latest tag being used are not scanned.\nHelm Charts With Helm charts it is possible to opt-in to having the images scanned and a report provided just like OLM based operators. The tavern chart, seen below, provides an example that illustrates a report with no vulnerabilities. Like the OLM operators, it shows a grade, when the last scan was performed, and the ability to see the full report.\nHelm charts do not provide an easy way to obtain all of the images that could possibly be used in a chart. It\u0026rsquo;s not possible to know how to render all charts in all possible configurations to detect the images within them. To enable Artifact Hub to discover the images a chart author needs to list them in annotations within the Chart.yaml file for the chart. The following example shows the format:\nannotations: artifacthub.io/images: |- name: img1 image: repo/img1:1.0.0 - name: img2 image: repo/img2:2.0.0 You can learn more about listing images in the Helm supported annotations documentation.\nHow It Works The security report is generated using Trivy and periodic scans. The scanner checks images that have not been scanned. Images that were last scanned 7 days ago are re-scanned even when there was no change to a package. This will enable the detection of newly discovered CVEs to be shown in the report.\nSome images cannot be scanned, such as those with binaries in a scratch container or those tagged with latest. In those cases a report will not be shown.\nYou can learn more about the security report in the documentation.\n"}),a.add({id:15,href:'/blog/what-is-artifacthub/',title:"What Is The Artifact Hub?",content:"Finding cloud native artifacts on the Internet can be difficult. When we talk about artifacts we mean things like Helm charts, Kubernetes operators, Falco rules, and Open Policy Agent (OPA) policies. If you use a search engine to look for them the results will be mixed with articles, documentation, and discussion. This experience is far from ideal if you want to find a package or tool to install.\nThis has lead to the rise of Hubs like the Helm Hub (which now redirects to the Artifact Hub) and Operator Hub. These hubs made it possible to discover distributed artifacts for one project or another. These hubs improved the experience but were still missing an opportunity.\nIn November 2019, Dan Kohn brought together people from the Helm, Operator Framework, and KUDO projects to discuss the idea of one hub that would make discovery of all these things possible. This happened over lunch at CloudNativeCon/KubeCon in San Diego. It was one of the many times that Dan brought people together to try and make something happen for the broader cloud native community.\nThe Artifact Hub was born out of this idea Dan had. It has come a long way since its initial release. You can now find artifacts from various projects distributed by different people and companies all over the world. You can find projects that relate to each other. You can perform simple searches and you can apply filters. You can be notified when an artifact is updated (webhooks and email). And, so much more.\nThis blog will serve as a place you can learn about the new developments, why features were developed the way they are, and some of the existing features that are little known but useful.\n"}),a.add({id:16,href:'/categories/',title:"Categories",content:""}),a.add({id:17,href:'/tags/',title:"Tags",content:""})})()